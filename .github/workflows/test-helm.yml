name: Actions test HELM
on:
  push:
    branches:
      - 'staging'
      - 'production'

jobs:
  ## Build image
  build:
    runs-on: arc-runner-set
    steps:
      ## Make sure docker is running
      - name: Wait for docker
        run: until docker info > /dev/null 2>&1; do echo "Waiting for Docker..."; sleep 2; done

      ## Use metadata action to generate the image tags for the commit SHA and latest
      - name: Generate commit SHA and latest tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          flavor: |
            latest=true
          images: |
            ${{ vars.DOCKER_DO_REGISTRY }}/${{github.event.repository.name }}
          tags: |
            type=sha,format=long,prefix=,postfix=

      - name: Install Docker Buildx
        uses: docker/setup-buildx-action@v3

      ## - login to docker registry using doctl
#      - uses: docker/login-action@v3
#        with:
#          registry: ${{ vars.DOCKER_DO_REGISTRY }}
#          username: ${{ secrets.DOCKER_DO_REGISTRY_USER }}
#          password: ${{ secrets.DOCKER_DO_REGISTRY_PASSWORD }}
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCKER_DO_REGISTRY_TOKEN }}

      - name: Login to docker registry using doctl
        run: doctl registry login --expiry-seconds 600

      ## - pull the latest image for the current project
      ## - build the image for the current project
      ## - tag the newly created image as the current commit SHA and as latest
      ## - push the tags to the registry
      - name: Build and push commit SHA and latest tags
        uses: docker/build-push-action@v6
        with:
          cache-from: type=registry,ref=${{ vars.DOCKER_DO_REGISTRY }}/${{github.event.repository.name }}:${{github.sha}}
          push: true
          provenance: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  ## Create staging image
  create-staging-image:
    if: github.ref_name == 'staging'
    runs-on: arc-runner-set
    needs: [ build ]
    steps:
      ## Make sure docker is running
      - name: Wait for docker
        run: until docker info > /dev/null 2>&1; do echo "Waiting for Docker..."; sleep 2; done

      ## Use metadata action to generate the image tags for the commit SHA and latest
      - name: Generate staging Tag
        id: meta
        uses: docker/metadata-action@v5
        with:
          flavor: |
            latest=false
          images: |
            ${{ vars.DOCKER_DO_REGISTRY }}/${{github.event.repository.name }}
          tags: |
            type=raw,staging

      - name: Install Docker Buildx
        uses: docker/setup-buildx-action@v3

      ## - login to docker registry using doctl
      #      - uses: docker/login-action@v3
      #        with:
      #          registry: ${{ vars.DOCKER_DO_REGISTRY }}
      #          username: ${{ secrets.DOCKER_DO_REGISTRY_USER }}
      #          password: ${{ secrets.DOCKER_DO_REGISTRY_PASSWORD }}
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DOCKER_DO_REGISTRY_TOKEN }}

      - name: Login to docker registry using doctl
        run: doctl registry login --expiry-seconds 600

      ## - pull the latest image for the current project
      ## - build the image for the current project
      ## - tag the newly created image as the staging tag
      ## - push the tags to the registry
      - name: Build and push Staging tag
        uses: docker/build-push-action@v6
        with:
          cache-from: type=registry,ref=${{ vars.DOCKER_DO_REGISTRY }}/${{github.event.repository.name }}:${{github.sha}}
          push: true
          provenance: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  ## Deploy staging v1
  deploy-staging:
    if: github.ref_name == 'staging'
    runs-on: arc-runner-set
    needs: [ create-staging-image ]
    container:
      image: allesonline/helm-laravel:latest
      # env:
      #   HELM_VALUES: /github/workspace/helm/staging/default.yaml
      #   KUBE_URL: ${{ secrets.KUBE_URL_STAGING }}
      #   KUBE_TOKEN: ${{ secrets.KUBE_TOKEN_STAGING }}
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to Staging
        run: sh /entrypoint-github-agent.sh
        env:
          KUBE_URL: ${{ secrets.KUBE_URL_STAGING }}
          KUBE_TOKEN: ${{ secrets.KUBE_TOKEN_STAGING }}
          HELM_VALUES: helm/staging/default.yaml

  ## Deploy production
  deploy-production:
    if: github.ref_name == 'production'
    runs-on: arc-runner-set
    needs: [ build ]
    steps:
      ## login to docker
      ## pull the image with current commit SHA for the current project
      ## tag the image as production
      ## push the production tag
      ## deploy to kubernetes
      - run: echo "deploy-production"
